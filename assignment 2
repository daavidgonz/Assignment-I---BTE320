{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[]},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","source":["# Problem Set 2"],"metadata":{"id":"mqKVIuY-mxNU"}},{"cell_type":"markdown","source":["## Assignment 1: Quality Control (7 points)\n","\n","A quality control manager would like to find the average weight of a list of weights. Prior experience indicates that the first two measures are atypical, and the practice is to exclude these from the average calculation.\n","\n","Write a program that calculates the average of a list of numbers that given as inputs from the user, excluding the first two values.\n","\n","For your program, you must define and use the following functions:\n","- `getValues(n)`: Prompt the user for `n` values, returns the list\n","- `calcAverage(alist)`: Calculates the average from the list"],"metadata":{"id":"-RSYW1jVm08n"}},{"cell_type":"code","execution_count":null,"metadata":{"id":"AqbgJkgNmvQw","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1713541792666,"user_tz":240,"elapsed":27178,"user":{"displayName":"David Gonzalez","userId":"08808001480561140386"}},"outputId":"ebd19e59-d8f3-4402-9310-e52e08456422"},"outputs":[{"output_type":"stream","name":"stdout","text":["Enter amount of values: 4\n","Enter value: 1\n","Enter value: 2\n","Enter value: 3\n","Enter value: 4\n","Average excluding the first two values: 3.5\n"]}],"source":["def getValues(n):\n","    values = []\n","    for i in range(n):\n","        value = float(input(\"Enter value: \".format(i+1)))\n","        values.append(value)\n","    return values\n","\n","def calcAverage(alist):\n","    excluded_values = alist[2:]\n","    if excluded_values:\n","        average = sum(excluded_values) / len(excluded_values)\n","    else:\n","        average = 0\n","    return average\n","\n","def main():\n","    n = int(input(\"Enter amount of values: \"))\n","    values = getValues(n)\n","    average = calcAverage(values)\n","    print(\"Average excluding the first two values:\", average)\n","\n","if __name__ == \"__main__\":\n","    main()"]},{"cell_type":"markdown","source":["## Assignment 2: Country Statistics Lookup-Multiple Measures (6 points)\n","\n","Assume a program begins with the statement:\n","\n","```python\n","allData = { # dictionary of values for countries\n","    'US': {'pop':325.7, 'gdp': 19.39, 'ccy': 'USD', 'fx':  1.0},\n","    'CA': {'pop': 36.5, 'gdp':  1.65, 'ccy': 'CAD', 'fx':  1.35},\n","    'MX': {'pop':129.2, 'gdp':  1.15, 'ccy': 'MXN', 'fx': 19.68}\n","    }\n","```\n","\n","Write subsequent statements that (in a loop) prompt the user for a country code (`US`, `CA`, or `MX`), then prompt for a measure name (`pop`, `gdp`, `ccy`, or `fx`), then look up in the above dictionary for the corresponding value, and display it.\n","\n","Example run:\n","```\n","Please enter a country code: CA\n","Please enter a statistic: pop\n","CA pop = 36.5\n","```\n","\n","Your program should handle the cases where a user-entered country code or measure name is not found."],"metadata":{"id":"QFO0Kzx8ncnv"}},{"cell_type":"code","source":["allData = { # dictionary of values for countries\n","    'US': {'pop':325.7, 'gdp': 19.39, 'ccy': 'USD', 'fx':  1.0},\n","    'CA': {'pop': 36.5, 'gdp':  1.65, 'ccy': 'CAD', 'fx':  1.35},\n","    'MX': {'pop':129.2, 'gdp':  1.15, 'ccy': 'MXN', 'fx': 19.68}\n","    }\n","\n","while(True):\n","  countryCode = input(\"Enter a country code: \")\n","  if countryCode in allData:\n","    dataMeasure = input(\"Enter a measure name: \")\n","    if dataMeasure in allData[countryCode]:\n","      print(f\"output:\", allData[countryCode][dataMeasure])\n","    else: print('Please enter a valid measure name')\n","  else: print('Please enter a valid country code')"],"metadata":{"id":"NZFjRINKowEW"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["## Assignment 3: Parking Garage (6 points)\n","\n","Write a program to compute the fee for parking in a garage for a number of hours.\n","\n","The program should:\n","- Prompt the user for how many hours parked\n","- Calculate the fee based on the following rules:\n","  - $2.50/hour\n","\n","  - minimum fee is $6.00\n","\n","  - maximum fee is $20.00\n","- Print the result\n","\n","For your program, define and use the following two functions:\n","```python\n","# use input() to prompt for the # of hours parked, return this value\n","def getParkingHours()\n","\n","# takes as input hours (a number), returns the parking fee\n","def calcParkingFee()\n","```"],"metadata":{"id":"GjaUFrnfpKFf"}},{"cell_type":"code","source":["import pandas as pd\n","\n","def getParkingHours():\n","    hours = float(input(\"Enter the number of hours parked: \"))\n","    return hours\n","\n","def calcParkingFee(hours):\n","    fee = hours * 2.50\n","    fee = max(6.00, min(fee, 20.00))\n","\n","    return fee\n","\n","def main():\n","    hours_parked = getParkingHours()\n","    parking_fee = calcParkingFee(hours_parked)\n","    df = pd.DataFrame({\"Hours Parked\": [hours_parked], \"Parking Fee\": [parking_fee]})\n","    print(df)\n","\n","if __name__ == \"__main__\":\n","    main()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"8ezGs-0WJqrO","executionInfo":{"status":"ok","timestamp":1713543592664,"user_tz":240,"elapsed":1760,"user":{"displayName":"David Gonzalez","userId":"08808001480561140386"}},"outputId":"07d88a27-fadb-4994-d507-fb16700cc0a5"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Enter the number of hours parked: 8\n","   Hours Parked  Parking Fee\n","0           8.0         20.0\n"]}]},{"cell_type":"markdown","source":["## Assignment 4: Tuition (6 points)\n","\n","A college charges tuition according to the following:\n","- 12 or more credits: $20,000/semester\n","\n","- 1-11 credits: $1,200 + $1,700 per credit\n","\n","Write a program that prompts the user for a number of credits and determines and displays the tuition for the semester. As part of your program, define and use the following function:\n","```python\n","def calcTuition(credits)\n","```\n","The function returns the tuition for a given number of credits"],"metadata":{"id":"gipBObe5qm-2"}},{"cell_type":"code","source":["def calcTuition(credits):\n","    if credits >=12:\n","        fees = 20000\n","    else:\n","        fees = 1200 + 1700*credits\n","\n","    return fees\n","\n","credits=int(input(\"Enter the number of credits: \"))\n","\n","print(\"Tuition fees : $\",calcTuition(credits))"],"metadata":{"id":"BPcn9ywzrL8y","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1713543835565,"user_tz":240,"elapsed":1861,"user":{"displayName":"David Gonzalez","userId":"08808001480561140386"}},"outputId":"b756eb79-8d9f-4f0f-8726-fdfcb261532a"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Enter the number of credits: 10\n","Tuition fees : $ 18200\n"]}]}]}